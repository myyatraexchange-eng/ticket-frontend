import React, { useEffect, useState } from "react";
import axios from "axios";

const API_BASE = import.meta.env.VITE_API_BASE_URL || "https://ticket-backend-main.onrender.com/api";

const FindTicket = () => {
  const [tickets, setTickets] = useState([]);
  const [loading, setLoading] = useState(false);
  const [proofData, setProofData] = useState({
    ticketId: "",
    transactionId: "",
    amount: "",
    paymentMethod: "UPI",
    screenshotUrl: "",
  });

  const [submitting, setSubmitting] = useState(false);

  // тЬЕ Fetch all tickets
  const fetchTickets = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem("token");
      const res = await axios.get(`${API_BASE}/tickets`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setTickets(res.data.tickets || []);
    } catch (err) {
      console.error("тЭМ Error fetching tickets:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTickets();
  }, []);

  // тЬЕ Handle input change for payment proof
  const handleProofChange = (e) => {
    setProofData({ ...proofData, [e.target.name]: e.target.value });
  };

  // тЬЕ Handle proof submission
  const handleSubmitProof = async (e) => {
    e.preventDefault();
    if (!proofData.transactionId || !proofData.amount) {
      alert("рдХреГрдкрдпрд╛ рд╕рднреА рд╡рд┐рд╡рд░рдг рднрд░реЗрдВред");
      return;
    }

    try {
      setSubmitting(true);
      const token = localStorage.getItem("token");

      const res = await axios.post(
        `${API_BASE}/payments/upload-proof`, // тЬЕ Correct endpoint
        proofData,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      alert("тЬЕ Payment proof рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ред Admin verification рдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░реЗрдВред");

      // тЬЕ Ticket рдХреЛ hide рдХрд░ рджреЛ (frontend рд╕реЗ remove)
      setTickets((prev) => prev.filter((t) => t._id !== proofData.ticketId));

      // тЬЕ Reset form
      setProofData({
        ticketId: "",
        transactionId: "",
        amount: "",
        paymentMethod: "UPI",
        screenshotUrl: "",
      });
    } catch (err) {
      console.error("тЭМ Error submitting payment proof:", err);
      alert("тЭМ Submission failed. рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="container mx-auto p-6">
      <h2 className="text-2xl font-bold mb-4">ЁЯОЯ рдЙрдкрд▓рдмреНрдз Tickets</h2>

      {loading ? (
        <p>рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...</p>
      ) : tickets.length === 0 ? (
        <p>рдХреЛрдИ рдЯрд┐рдХрдЯ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред</p>
      ) : (
        tickets.map((ticket) => (
          <div key={ticket._id} className="border rounded-lg p-4 mb-4 shadow">
            <h3 className="text-xl font-semibold">
              ЁЯЪЖ {ticket.trainName} ({ticket.trainNumber})
            </h3>
            <p>ЁЯУН Route: {ticket.from} тЖТ {ticket.to}</p>
            <p>ЁЯЧУ Date: {new Date(ticket.date).toLocaleDateString()}</p>
            <p>ЁЯТ║ Class: {ticket.classType}</p>
            <p>ЁЯТ░ Price: тВ╣{ticket.price}</p>

            <button
              className="bg-green-600 text-white px-4 py-2 mt-3 rounded"
              onClick={() => setProofData({ ...proofData, ticketId: ticket._id, amount: ticket.price })}
            >
              Pay тВ╣{ticket.price} & Unlock Contact
            </button>
          </div>
        ))
      )}

      {/* тЬЕ Payment proof form */}
      {proofData.ticketId && (
        <div className="mt-6 p-4 border rounded-lg bg-gray-50">
          <h3 className="font-bold mb-2">ЁЯТ│ Payment Proof рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ</h3>
          <form onSubmit={handleSubmitProof} className="space-y-3">
            <input
              type="text"
              name="transactionId"
              value={proofData.transactionId}
              onChange={handleProofChange}
              placeholder="Transaction ID"
              className="border p-2 w-full rounded"
              required
            />
            <input
              type="number"
              name="amount"
              value={proofData.amount}
              onChange={handleProofChange}
              placeholder="Amount (тВ╣)"
              className="border p-2 w-full rounded"
              required
            />
            <select
              name="paymentMethod"
              value={proofData.paymentMethod}
              onChange={handleProofChange}
              className="border p-2 w-full rounded"
            >
              <option value="UPI">UPI</option>
              <option value="Bank Transfer">Bank Transfer</option>
              <option value="Other">Other</option>
            </select>
            <input
              type="text"
              name="screenshotUrl"
              value={proofData.screenshotUrl}
              onChange={handleProofChange}
              placeholder="Screenshot Image URL (optional)"
              className="border p-2 w-full rounded"
            />
            <button
              type="submit"
              disabled={submitting}
              className="bg-blue-600 text-white px-4 py-2 rounded w-full"
            >
              {submitting ? "рд╕рдмрдорд┐рдЯ рд╣реЛ рд░рд╣рд╛ рд╣реИ..." : "рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ"}
            </button>
          </form>
        </div>
      )}
    </div>
  );
};

export default FindTicket;

